
 Module - 2: Node - NodeJS – Introduction


 Q1. What is Node.js? Where can you use it?

	- It is a cross-platform runtime environment that allows you to execute JavaScript code in  server-side.
  	- Node.js allows developers to use JavaScript outside of the browser to build  applications.
	- Node.js comes with NPM which has many open-source libraries that can be easily added into your projects.
 	- Node.js is single-threaded, but it can handle many connections at once because of  asynchronous operations.
 	- It is used in full-stack applications for building server side logic , for creating RESTful APIs and microservices

 Q2. Explain callback in Node.js.
	 - A callback in Node.js is a function that is passed as an argument to another function and is executed after the completion of that function.
	 - Node.js uses asynchronous operations and callbacks to manage tasks like file reading and network requests .

 	 Example :
 	 const fs = require('fs');
 	 fs.readFile('example.txt', 'utf8', (err, data) => {
  	     if (err) {
        console.error('Error reading file:', err);
        return;  }
   	 console.log('File content:', data);
 	  });
	console.log('This will run before the file reading is complete');

 Q3. What are the advantages of using promises instead of callbacks?
	- Promises provide a cleaner, more readable way to handle asynchronous operations compared to using nested callbacks.
	-Promises work well with async/await, making your code look more like normal synchronous code and easier to read.
	- Promises can easily combine multiple asynchronous operations using methods like Promise.all().
	- Promises avoid "callback hell" by using chain operations of .then() methods.

 Q4. What is NPM?
	- Using NPM, you can easily uninstall, update, and install packages (or dependencies) from the NPM registry that any project requires.
	- It also manages versioning to make sure correct versions of packages are used in the  project.
	- NPM allows you to define scripts in your package.json file to automate tasks like testing, building, and running your application.
	 using commands like npm start, npm test, etc.
 
 

 Q5. What are the modules in Node.js? Explain
	- A module is a reusable block of code that can be used to perform various tasks.
	-Three types are core modules , local module, third-party modules 

 	1 > Core modules  - Core module are inbuilt modules in node js  which comes when we install node js in 
 	system and to import those modules require function is used . Fs ,  http , os  , etc  are  core modules .

	2> Local modules –  local module are modules created locally in node js app and can be reused across different parts of the project 

	3> Third-party modules- Modules which are available online an can be installed using npm . These modules provide additional 
	functionality for the applications.

 Q6. Create TODO app using FS module with yargs (command line arguments).

const fs = require("fs");
const yargs = require("yargs");

// path for todo file
const todosFile = "todos.json";

// this function load the TODOs from the file
const loadTodos = () => {
  try {
    const dataJSON = fs.readFileSync(todosFile, "utf-8");
    return JSON.parse(dataJSON);
  } catch (e) {
    return [];
  }
};

// this function save TODOs to the file
const saveTodos = (todos) => {
  const dataJSON = JSON.stringify(todos, null, 2);
  fs.writeFileSync(todosFile, dataJSON);
};

// Command to add a new TODO
yargs.command({
  command: "add",
  describe: "Add a new TODO",
  builder: {
    title: {
      type: "string",
    },
    body: {
      type: "string",
    },
  },
  handler(argv) {
    const todos = loadTodos();
    const todo = {
      title: argv.title,
      body: argv.body,
    };
    todos.push(todo);
    saveTodos(todos);
    console.log("New TODO added!");
  },
});

// Command to remove a TODO
yargs.command({
  command: "remove",
  describe: "Remove a TODO",
  builder: {
    title: {
      type: "string",
    },
  },
  handler(argv) {
    let todos = loadTodos();
    const initialLength = todos.length;
    todos = todos.filter((todo) => todo.title !== argv.title);
    if (todos.length < initialLength) {
      saveTodos(todos);
      console.log("TODO removed!");
    } else {
      console.log("TODO not found");
    }
  },
});

// Command to list all TODOs
yargs.command({
  command: "list",
  describe: "List all TODOs",
  handler() {
    const todos = loadTodos();
    if (todos.length === 0) {
      console.log("No TODOs found");
    } else {
      console.log(" TODOs:");
      todos.forEach((todo, index) => {
        console.log(`${index + 1}. ${todo.title}: ${todo.body}`);
      });
    }
  },
});

// Command to read a particular TODO
yargs.command({
  command: "read",
  describe: "Read a specific TODO",
  builder: {
    title: {
      type: "string",
    },
  },
  handler(argv) {
    const todos = loadTodos();
    const todo = todos.find((todo) => todo.title === argv.title);

    if (todo) {
      console.log(`Title: ${todo.title}`);
      console.log(`Description: ${todo.body}`);
    } else {
      console.log("TODO not found");
    }
  },
});

yargs.argv;





